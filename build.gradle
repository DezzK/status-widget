/*
 * Copyright Â© 2025 Dezz (https://github.com/DezzK)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

String getVersionName() {
    def envVersion = System.getenv('VERSION_NAME')
    if (envVersion) {
        return envVersion
    }

    logger.warn('Environment variable `VERSION_NAME` was not set, using default version')

    return 'v1.0.0'
}

int getVersionCode() {
    def version = getVersionName()
    def (major, minor, patch) = version.replaceFirst('^v', '').replaceFirst('-\\w+$', '').tokenize('.').collect { it.toInteger() }

    return major * 10000 + minor * 100 + (patch ?: 0)
}

ext {
    appVersionName = getVersionName()
    appVersionCode = getVersionCode()

    println "Building version: ${appVersionName} (${appVersionCode})"
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.gradle.plugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    // Add dependency constraints for all projects
    configurations.configureEach {
        resolutionStrategy {
            // Force specific Kotlin versions
            force libs.kotlin.stdlib
            force libs.kotlin.stdlib.common
            force libs.kotlin.stdlib.jdk8

            // Fail on version conflict
            failOnVersionConflict()

            // Prefer modules that are part of this build (multi-project or composite build)
            preferProjectModules()
        }
    }
}
